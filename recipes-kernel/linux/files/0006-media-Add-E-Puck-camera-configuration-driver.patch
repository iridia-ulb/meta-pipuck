From 35b0a7699f5ddb99ff2365d4ee436537fd6a787a Mon Sep 17 00:00:00 2001
From: Michael Allwright <allsey87@gmail.com>
Date: Fri, 16 Oct 2020 13:54:45 +0200
Subject: [PATCH] media: Add E-Puck camera configuration driver

---
 drivers/media/i2c/Kconfig            |  10 +
 drivers/media/i2c/Makefile           |   1 +
 drivers/media/i2c/epuck-cameraconf.c | 302 +++++++++++++++++++++++++++
 3 files changed, 313 insertions(+)
 create mode 100644 drivers/media/i2c/epuck-cameraconf.c

diff --git a/drivers/media/i2c/Kconfig b/drivers/media/i2c/Kconfig
index 0a0973b5f55d..f02bbfcad571 100644
--- a/drivers/media/i2c/Kconfig
+++ b/drivers/media/i2c/Kconfig
@@ -566,6 +566,16 @@ config VIDEO_APTINA_PLL
 config VIDEO_SMIAPP_PLL
 	tristate
 
+config VIDEO_EPUCK
+	tristate "E-Puck camera configuration"
+	depends on I2C
+	help
+	  Configures various E-Puck cameras to be compatible with
+	  the Unversity of York UVC interface.
+
+	  To compile this driver as a module, choose M here: the
+	  module will be called epuck_cameraconf.
+
 config VIDEO_IMX214
 	tristate "Sony IMX214 sensor support"
 	depends on GPIOLIB && I2C && VIDEO_V4L2 && VIDEO_V4L2_SUBDEV_API
diff --git a/drivers/media/i2c/Makefile b/drivers/media/i2c/Makefile
index 9aaf6f2bd87e..b8e68a5a1c1b 100644
--- a/drivers/media/i2c/Makefile
+++ b/drivers/media/i2c/Makefile
@@ -111,6 +111,7 @@ obj-$(CONFIG_VIDEO_I2C)		+= video-i2c.o
 obj-$(CONFIG_VIDEO_ML86V7667)	+= ml86v7667.o
 obj-$(CONFIG_VIDEO_OV2659)	+= ov2659.o
 obj-$(CONFIG_VIDEO_TC358743)	+= tc358743.o
+obj-$(CONFIG_VIDEO_EPUCK)	+= epuck-cameraconf.o
 obj-$(CONFIG_VIDEO_IMX214)	+= imx214.o
 obj-$(CONFIG_VIDEO_IMX219)	+= imx219.o
 obj-$(CONFIG_VIDEO_IMX258)	+= imx258.o
diff --git a/drivers/media/i2c/epuck-cameraconf.c b/drivers/media/i2c/epuck-cameraconf.c
new file mode 100644
index 000000000000..5d0e1c36fda5
--- /dev/null
+++ b/drivers/media/i2c/epuck-cameraconf.c
@@ -0,0 +1,302 @@
+// SPDX-License-Identifier: GPL-2.0+
+
+/*
+ * Camera configuration driver for the E-Puck
+ *
+ * Copyright (C) 2020 Michael Allwright
+ */
+
+#include <linux/delay.h>
+#include <linux/irq.h>
+#include <linux/kernel.h>
+#include <linux/i2c.h>
+#include <linux/module.h>
+#include <linux/of_device.h>
+#include <linux/sched.h>
+#include <linux/slab.h>
+
+#define BANK_REGISTER			0x03
+#define BANK_A				0x00
+#define BANK_B				0x01
+#define BANK_C				0x02
+#define BANK_D				0x03
+
+// PO8030 registers
+// Bank A registers
+#define PO8030_REG_FRAMEWIDTH_H		0x04
+#define PO8030_REG_FRAMEWIDTH_L		0x05
+#define PO8030_REG_FRAMEHEIGHT_H	0x06
+#define PO8030_REG_FRAMEHEIGHT_L	0x07
+#define PO8030_REG_WINDOWX1_H		0x08
+#define PO8030_REG_WINDOWX1_L		0x09
+#define PO8030_REG_WINDOWY1_H		0x0A
+#define PO8030_REG_WINDOWY1_L		0x0B
+#define PO8030_REG_WINDOWX2_H		0x0C
+#define PO8030_REG_WINDOWX2_L		0x0D
+#define PO8030_REG_WINDOWY2_H		0x0E
+#define PO8030_REG_WINDOWY2_L		0x0F
+#define PO8030_REG_VSYNCSTARTROW_H	0x10
+#define PO8030_REG_VSYNCSTARTROW_L	0x11
+#define PO8030_REG_VSYNCSTOPROW_H	0x12
+#define PO8030_REG_VSYNCSTOPROW_L	0x13
+#define PO8030_REG_INTTIME_H		0x17
+#define PO8030_REG_INTTIME_M		0x18
+#define PO8030_REG_INTTIME_L		0x19
+#define PO8030_REG_WB_RGAIN		0x23
+#define PO8030_REG_WB_GGAIN		0x24
+#define PO8030_REG_WB_BGAIN		0x25
+#define PO8030_REG_AUTO_FWX1_H		0x35
+#define PO8030_REG_AUTO_FWX1_L		0x36
+#define PO8030_REG_AUTO_FWX2_H		0x37
+#define PO8030_REG_AUTO_FWX2_L		0x38
+#define PO8030_REG_AUTO_FWY1_H		0x39
+#define PO8030_REG_AUTO_FWY1_L		0x3A
+#define PO8030_REG_AUTO_FWY2_H		0x3B
+#define PO8030_REG_AUTO_FWY2_L		0x3C
+#define PO8030_REG_AUTO_CWX1_H		0x3D
+#define PO8030_REG_AUTO_CWX1_L		0x3E
+#define PO8030_REG_AUTO_CWX2_H		0x3F
+#define PO8030_REG_AUTO_CWX2_L		0x40
+#define PO8030_REG_AUTO_CWY1_H		0x41
+#define PO8030_REG_AUTO_CWY1_L		0x42
+#define PO8030_REG_AUTO_CWY2_H		0x43
+#define PO8030_REG_AUTO_CWY2_L		0x44
+#define PO8030_REG_PAD_CONTROL		0x5B
+#define PO8030_REG_SOFTRESET		0x69
+#define PO8030_REG_CLKDIV		0x6A
+#define PO8030_REG_BAYER_CONTROL_01	0x6C // Vertical/horizontal mirror.
+// Bank B registers
+#define PO8030_REG_ISP_FUNC_2		0x06 // Embossing, sketch, proximity.
+#define PO8030_REG_FORMAT		0x4E
+#define PO8030_REG_SKETCH_OFFSET	0x8F
+#define PO8030_REG_SCALE_X		0x93
+#define PO8030_REG_SCALE_Y		0x94
+#define PO8030_REG_SCALE_TH_H		0x95
+#define PO8030_REG_SCALE_TH_L		0x96
+#define PO8030_REG_CONTRAST		0x9D
+#define PO8030_REG_BRIGHTNESS		0x9E
+#define PO8030_REG_SYNC_CONTROL0	0xB7
+// Bank C registers
+#define PO8030_REG_AUTO_CONTROL_1	0x04 // AutoWhiteBalance, AutoExposure.
+#define PO8030_REG_EXPOSURE_T		0x12
+#define PO8030_REG_EXPOSURE_H		0x13
+#define PO8030_REG_EXPOSURE_M		0x14
+#define PO8030_REG_EXPOSURE_L		0x15
+#define PO8030_REG_SATURATION		0x2C
+
+// Formats
+#define FORMAT_CBYCRY			0x00
+#define FORMAT_CRYCBY			0x01
+#define FORMAT_YCBYCR			0x02
+#define FORMAT_YCRYCB			0x03
+#define FORMAT_RGGB			0x10
+#define FORMAT_GBRG			0x11
+#define FORMAT_GRBG			0x12
+#define FORMAT_BGGR			0x13
+#define FORMAT_RGB565			0x30
+#define FORMAT_RGB565_BYTE_SWAP		0x31
+#define FORMAT_BGR565			0x32
+#define FORMAT_BGR565_BYTE_SWAP		0x33
+#define FORMAT_RGB444			0x36
+#define FORMAT_RGB444_BYTE_SWAP		0x37
+#define FORMAT_DPC_BAYER		0x41
+#define FORMAT_YYYY			0x44
+
+static int epuck_cameraconf_po3030_init(struct i2c_client *client)
+{
+	/* Set frame size to 960x512 to slow the maximum frame rate to 15 fps */
+	u16 frame_width = 960 - 1;
+	u16 frame_height = 512 - 1;
+	/* Set output format to YCbYCr (see table on page 64 of PO3030K data sheet) */
+	i2c_smbus_write_byte_data(client, 0x4E, 0x02); // Format = Y Cb Y Cr
+	i2c_smbus_write_byte_data(client, 0x50, 0x40); // "Reserved"
+	i2c_smbus_write_byte_data(client, 0x9B, 0x00); // Brightness
+	i2c_smbus_write_byte_data(client, 0x9C, 0x96); // Y Contrast
+	i2c_smbus_write_byte_data(client, 0x04, (frame_width >> 8) & 0xFF); // Frame width, high
+	i2c_smbus_write_byte_data(client, 0x05, frame_width & 0xFF); // Frame width, low
+	i2c_smbus_write_byte_data(client, 0x06, (frame_height >> 8) & 0xFF); // Frame height, high
+	i2c_smbus_write_byte_data(client, 0x07, frame_height & 0xFF); // Frame height, low
+	/* Disable Auto Exposure - locks framerate to 15fps but might not always be desirable */
+	i2c_smbus_write_byte_data(client, 0xD4, 0x2C);
+	/* Disable HSYNC outside of active region (i.e. during VSYNC) (see p34 of datasheet) */
+	i2c_smbus_write_byte_data(client, 0x4F, 0x2); // Image Signal Processor (ISP) Control 3 - set HD to 0
+	return 0;
+}
+
+static int epuck_cameraconf_po6030_init(struct i2c_client *client)
+{
+	/* Set image output size to VGA mode (640x480) (see table on page 60 of PO6030K data sheet) */
+	u16 x1 = 7;
+	u16 y1 = 7;
+	u16 x2 = 646;
+	u16 y2 = 486;
+	u16 frame_width = 960-1;
+	u16 frame_height = 512-1;
+	i2c_smbus_write_byte_data(client, BANK_REGISTER, BANK_B); // Switch to Bank B
+	i2c_smbus_write_byte_data(client, 0x50, (x1 >> 8) & 0xFF); // Window_X1_H
+	i2c_smbus_write_byte_data(client, 0x51, x1 & 0xFF); // Window_X1_L
+	i2c_smbus_write_byte_data(client, 0x52, (y1 >> 8) & 0xFF); // Window_Y1_H
+	i2c_smbus_write_byte_data(client, 0x53, y1 & 0xFF); // Window_Y1_L
+	i2c_smbus_write_byte_data(client, 0x54, (x2 >> 8) & 0xFF); // Window_X2_H
+	i2c_smbus_write_byte_data(client, 0x55, x2 & 0xFF); // Window_X2_L
+	i2c_smbus_write_byte_data(client, 0x56, (y2 >> 8) & 0xFF); // Window_Y2_H
+	i2c_smbus_write_byte_data(client, 0x57, y2 & 0xFF); // Window_Y2_L
+	i2c_smbus_write_byte_data(client, 0x61, 0x0C); // VsyncStartRow_L
+	i2c_smbus_write_byte_data(client, 0x63, 0xEC); // VsyncStopRow_L
+	i2c_smbus_write_byte_data(client, 0x80, 0x20); // Scale_X
+	i2c_smbus_write_byte_data(client, 0x81, 0x20); // Scale_Y
+	i2c_smbus_write_byte_data(client, 0x82, 0x01); // Reserved
+	i2c_smbus_write_byte_data(client, 0x68, 0x00); // SyncControl0
+	/* Would it also be useful to disable Auto Exposure here for a constant frame rate? */
+	i2c_smbus_write_byte_data(client, BANK_REGISTER, BANK_C); // Switch to Bank C
+	i2c_smbus_write_byte_data(client, 0x11, 0x25); // AEWin_X_L
+	i2c_smbus_write_byte_data(client, 0x13, 0x1C); // AEWin_Y_L
+	i2c_smbus_write_byte_data(client, 0x14, 0x02); // AEWinWidth_H
+	i2c_smbus_write_byte_data(client, 0x15, 0x60); // AEWinWidth_L
+	i2c_smbus_write_byte_data(client, 0x16, 0x01); // AEWinHeight_H
+	i2c_smbus_write_byte_data(client, 0x17, 0xBE); // AEWinHeight_L
+	i2c_smbus_write_byte_data(client, 0x19, 0xE5); // AECenterWin_X_L
+	i2c_smbus_write_byte_data(client, 0x1B, 0x87); // AECenterWin_Y_L
+	i2c_smbus_write_byte_data(client, 0x1D, 0xA0); // AECenterWidth_L
+	i2c_smbus_write_byte_data(client, 0x1F, 0xA0); //# AECenterHeight_L
+	/* Set output format to YCbYCr (see table on page 67 of PO6030K data sheet) */
+	i2c_smbus_write_byte_data(client, BANK_REGISTER, BANK_B); // Switch to Bank B
+	i2c_smbus_write_byte_data(client, 0x38, 0x02); // Format = Y Cb Y Cr
+	i2c_smbus_write_byte_data(client, 0x90, 0xE0); // CS max = YCbCr range
+	i2c_smbus_write_byte_data(client, 0x91, 0x37); // Y contrast
+	i2c_smbus_write_byte_data(client, 0x92, 0x10); // Brightness
+	i2c_smbus_write_byte_data(client, 0x93, 0xEB); // Y max = YCbCr range
+	/* Rotate the image by 180 degrees, by flipping both horizontally and vertically (see page 78 of PO6030K data sheet) */
+	i2c_smbus_write_byte_data(client, BANK_REGISTER, BANK_B); // Switch to Bank B
+	i2c_smbus_write_byte_data(client, 0x68, 0x60); // SyncControl0 - enable Hsync and Vsync drop
+	i2c_smbus_write_byte_data(client, BANK_REGISTER, BANK_A); // Switch to Bank A
+	i2c_smbus_write_byte_data(client, 0x90, 0xF5); // BayerControl01 - enable horizontal and vertical mirror
+	msleep(35); // Must wait 1 (preview) frame time
+	i2c_smbus_write_byte_data(client, BANK_REGISTER, BANK_B); // Switch to Bank B
+	i2c_smbus_write_byte_data(client, 0x68, 0x00); // SyncControl0 - disable Hsync and Vsync drop
+	/* Set frame size to 960x512 to slow the maximum frame rate to 15 fps */
+	i2c_smbus_write_byte_data(client, BANK_REGISTER, BANK_B); // Switch to Bank B
+	i2c_smbus_write_byte_data(client, 0x48, (frame_width >> 8) & 0xFF); // Frame width, high
+	i2c_smbus_write_byte_data(client, 0x49, frame_width & 0xFF); // Frame width, low
+	/* These registers are mentioned on page 7 of data sheet, but page 26 suggests they have something to do with flicker? */
+	i2c_smbus_write_byte_data(client, 0x29, (frame_height >> 8) & 0xFF); // Frame height, high
+	i2c_smbus_write_byte_data(client, 0x2A, frame_height & 0xFF); // Frame height, low
+	return 0;
+}
+
+static int epuck_cameraconf_po8030_init(struct i2c_client *client)
+{
+	/* Set frame size to 960x512 or 875x800 to slow the maximum frame rate to 15 fps */
+	/* 960x512 for 14.7456Mhz pixel clock on e-puck1 */
+	// u16 frame_width = 960-1;
+	// u16 frame_height = 512-1;
+	/* 875x800 for 21MHz pixel clock on e-puck2 */
+	u16 frame_width = 875-1;
+	u16 frame_height = 800-1;
+	i2c_smbus_write_byte_data(client, BANK_REGISTER, BANK_A);
+	i2c_smbus_write_byte_data(client, PO8030_REG_PAD_CONTROL, 0x00);
+	i2c_smbus_write_byte_data(client, PO8030_REG_WINDOWX1_H, 0x00);
+	i2c_smbus_write_byte_data(client, PO8030_REG_WINDOWX1_L, 0x01);
+	i2c_smbus_write_byte_data(client, PO8030_REG_WINDOWY1_H, 0x00);
+	i2c_smbus_write_byte_data(client, PO8030_REG_WINDOWY1_L, 0x01);
+	i2c_smbus_write_byte_data(client, PO8030_REG_WINDOWX2_H, 0x02);
+	i2c_smbus_write_byte_data(client, PO8030_REG_WINDOWX2_L, 0x80);
+	i2c_smbus_write_byte_data(client, PO8030_REG_WINDOWY2_H, 0x01);
+	i2c_smbus_write_byte_data(client, PO8030_REG_WINDOWY2_L, 0xE0);
+	/* AE full window selection */
+	i2c_smbus_write_byte_data(client, PO8030_REG_AUTO_FWX1_H, 0x00);
+	i2c_smbus_write_byte_data(client, PO8030_REG_AUTO_FWX1_L, 0x01);
+	i2c_smbus_write_byte_data(client, PO8030_REG_AUTO_FWX2_H, 0x02);
+	i2c_smbus_write_byte_data(client, PO8030_REG_AUTO_FWX2_L, 0x80);
+	i2c_smbus_write_byte_data(client, PO8030_REG_AUTO_FWY1_H, 0x00);
+	i2c_smbus_write_byte_data(client, PO8030_REG_AUTO_FWY1_L, 0x01);
+	i2c_smbus_write_byte_data(client, PO8030_REG_AUTO_FWY2_H, 0x01);
+	i2c_smbus_write_byte_data(client, PO8030_REG_AUTO_FWY2_L, 0xE0);
+	/* AE center window selection */
+	i2c_smbus_write_byte_data(client, PO8030_REG_AUTO_CWX1_H, 0x00);
+	i2c_smbus_write_byte_data(client, PO8030_REG_AUTO_CWX1_L, 0xD6);
+	i2c_smbus_write_byte_data(client, PO8030_REG_AUTO_CWX2_H, 0x01);
+	i2c_smbus_write_byte_data(client, PO8030_REG_AUTO_CWX2_L, 0xAB);
+	i2c_smbus_write_byte_data(client, PO8030_REG_AUTO_CWY1_H, 0x00);
+	i2c_smbus_write_byte_data(client, PO8030_REG_AUTO_CWY1_L, 0xA1);
+	i2c_smbus_write_byte_data(client, PO8030_REG_AUTO_CWY2_H, 0x01);
+	i2c_smbus_write_byte_data(client, PO8030_REG_AUTO_CWY2_L, 0x40);
+	i2c_smbus_write_byte_data(client, BANK_REGISTER, BANK_B);
+	/* Scale settings */
+	i2c_smbus_write_byte_data(client, PO8030_REG_SCALE_X, 0x20);
+	i2c_smbus_write_byte_data(client, PO8030_REG_SCALE_Y, 0x20);
+	/* Format */
+	i2c_smbus_write_byte_data(client, PO8030_REG_FORMAT, FORMAT_YCBYCR);
+	i2c_smbus_write_byte_data(client, PO8030_REG_SYNC_CONTROL0, 0x00);
+	i2c_smbus_write_byte_data(client, BANK_REGISTER, BANK_A);
+	i2c_smbus_write_byte_data(client, PO8030_REG_VSYNCSTARTROW_L, 0x0A);
+	/* Seems to cause image tearing */
+	i2c_smbus_write_byte_data(client, BANK_REGISTER, BANK_B);
+	i2c_smbus_write_byte_data(client, PO8030_REG_SCALE_TH_H, 0x00);
+	i2c_smbus_write_byte_data(client, PO8030_REG_SCALE_TH_L, 0x0A);
+	i2c_smbus_write_byte_data(client, BANK_REGISTER, BANK_A); // Switch to Bank A
+	i2c_smbus_write_byte_data(client, PO8030_REG_FRAMEWIDTH_H, (frame_width >> 8) & 0xFF); // Frame width, high
+	i2c_smbus_write_byte_data(client, PO8030_REG_FRAMEWIDTH_L, frame_width & 0xFF); // Frame width, low
+	i2c_smbus_write_byte_data(client, PO8030_REG_FRAMEHEIGHT_H, (frame_height >> 8) & 0xFF); // Frame height, high
+	i2c_smbus_write_byte_data(client, PO8030_REG_FRAMEHEIGHT_L, frame_height & 0xFF); // Frame height, low
+	return 0;
+ }
+
+
+static int epuck_cameraconf_probe(struct i2c_client *client,
+				  const struct i2c_device_id *id)
+{
+	struct device *dev = &client->dev; // us
+	u8 data[2];
+	u16 sensor_id;
+
+	if(i2c_smbus_read_i2c_block_data(client, 0x00, 2, data) != 2) {
+		dev_err(dev, "Could not read sensor ID register");
+		return -ENXIO;
+	}
+	else {
+		sensor_id = (data[0] << 8) + data[1];
+		switch (sensor_id) {
+		case 0x3030:
+			dev_info(dev, "Configuring PO3030 camera sensor");
+			return epuck_cameraconf_po3030_init(client);
+			break;
+		case 0x6030:
+			dev_info(dev, "Configuring PO6030 camera sensor");
+			return epuck_cameraconf_po6030_init(client);
+			break;
+		case 0x8030:
+			dev_info(dev, "Configuring PO8030 camera sensor");
+			return epuck_cameraconf_po8030_init(client);
+			break;
+		}
+	}
+	dev_err(dev, "Unsupported sensor detected (ID = 0x%04X)", sensor_id);
+	return -ENXIO;
+}
+
+static const struct i2c_device_id epuck_cameraconf_id[] = {
+	{ "epuck-cameraconf", 0 },
+	{ /* sentinel */ }
+};
+MODULE_DEVICE_TABLE(i2c, epuck_cameraconf_id);
+
+static const struct of_device_id epuck_cameraconf_of_match[] = {
+	{ .compatible = "gctronic,epuck-cameraconf" },
+	{ /* sentinel */ }
+};
+MODULE_DEVICE_TABLE(of, epuck_cameraconf_of_match);
+
+static struct i2c_driver epuck_cameraconf_driver = {
+	.probe  = epuck_cameraconf_probe,
+        .driver = {
+		.name = "epuck-cameraconf",
+		.of_match_table = epuck_cameraconf_of_match,
+	},
+	.id_table = epuck_cameraconf_id,
+};
+module_i2c_driver(epuck_cameraconf_driver);
+
+MODULE_LICENSE("GPL");
+MODULE_AUTHOR("Michael Allwright <allsey87@gmail.com>");
+MODULE_DESCRIPTION("E-Puck camera configuration driver");
-- 
2.25.1

